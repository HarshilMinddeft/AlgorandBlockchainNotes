AVM and algo Notes 

There are 3 types of storage in algo
1) Local Storage => Account =>Can be read by anyone on chain
2) Box Storage => Contract  => Can be access by the app it belong to
3) Global Storage => Global =>Can be read by anyone on chain

-when we use @arc4.abimethod(create="require") function will executed while creating conract

* allow_actions types and usage

1. allow_actions=["NoOp"]:
Definition: NoOp (No Operation) is the most common type of transaction. It is used for general operations and interactions with the contract that do not involve creating, deleting, updating, opting in, or closing out.
Usage: If a method is marked with allow_actions=["NoOp"], it means that the method can be called only during regular transactions where the smart contract is interacting with other accounts or performing its intended logic after it has been created.
Example Use Case: Functions like buyAsset, transferFunds, or updatePrice which are meant to be used after the contract is deployed.

2. allow_actions=["UpdateApplication"]:
Definition: UpdateApplication transactions occur when the application (contract) is being updated. This includes changes to the contractâ€™s approval and clear state programs, or its configuration.
Usage: If a method is marked with allow_actions=["UpdateApplication"], it means that the method can only be invoked during an application update transaction. This is useful for functions that should only run when the contract is being updated, rather than during creation or regular operations.
Example Use Case: Functions related to changing contract parameters or settings during updates.

3. allow_actions=["DeleteApplication"]:
Definition: DeleteApplication transactions occur when the application is being deleted. This is often used to clean up the contract state or transfer assets back to the creator before the contract is removed.
Usage: If a method is marked with allow_actions=["DeleteApplication"], it means that the method can only be called during the deletion phase. It ensures that any clean-up logic is executed before the contract is removed.
Example Use Case: Functions for transferring remaining assets back to the contract creator or performing other finalization tasks before contract deletion.

4. allow_actions=["OptIn"]:
Definition: OptIn transactions occur when an account opts into the contract. This is needed when an account wants to interact with the contract or receive assets from it.
Usage: If a method is marked with allow_actions=["OptIn"], it means that the method can only be executed when an account opts into the contract. This is useful for ensuring that the contract is prepared for interactions or asset transfers when an account opts in.
Example Use Case: Functions related to ensuring that the contract account opts into specific assets or interacts with new users.

5. allow_actions=["CloseOut"]:
Definition: CloseOut transactions occur when an account closes out of the contract. This means that the account is no longer interacting with the contract and any remaining assets or state are handled accordingly.
Usage: If a method is marked with allow_actions=["CloseOut"], it means that the method can only be executed during a closeout transaction. This is used to manage the finalization or clean-up when an account closes its interaction with the contract.
Example Use Case: Functions to handle remaining assets or clean-up actions when an account no longer interacts with the contract.

____________________________________________________________________________________________________________________

-for sending funds to contract from user wallet, we cannot do using contract function like in solidity safeTransfer,payable function etc, we have to make external function in deploy script for doing that.
-algorand contract or application address are of 58 characters. eg -4ZNKG3SI54HS5QBOEUF5HWVIFE5XHIVQHH3UQDZNVZLGCMYGYAYOKTR7G4
-algorand contracts are defined or recognised by appid eg App #1121 inserd of contract address like in solidity
-By adding deleteApplication function smartcontracts can be deleted from algochain

-In algo every contract creation and call is worth 0.001 
so more complex transection on algo are not much expensive

-python on Avm for development 
As a partial implementation of the Python programming language, it maintains the syntax and semantics of Python. The subset of the language that is supported will grow over time, but it will never be a complete implementation due to the restricted nature of the AVM as an execution environment. As a trivial example, the async and await keywords, and all associated features, do not make sense to implement.

-In algorand smartcontracts itself is not account,Here every smartcontract have a unique appID that is unique identifyer of smartcontract
-If we send tokens to smartcontract we are actully sending it to a linked application account.
Every algo smartcontract have an associated application account.

Algorand dappflow Dispencer sends 1 algo when user enter 1 for withdraw if we use script dispencer eg-PayParams(sender=dispenser.address, receiver=acct.address, amount=1_000_000)
1000_000 microAlgos is = 1 algo 

results of testnet and localnet are different test algo contracts especially related timing calculation dont test using localnet use testnet for proper results it dosent work in localnet properly
solution:-
Chances are your localnet is in "DevMode" which means the chain won't progress forward unless there's a transaction to evaluate. And since it can only advance by 25 seconds at a time, it will quickly be old. If you set DevMode to false it'll work the same as you see on Testnet.

There is no Dict in algo python for storing multiple things its bit complex 

Links =>
https://algorandfoundation.github.io/puya/language-guide.html
https://algorandfoundation.github.io/puya/
