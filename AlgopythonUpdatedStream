from algopy import *

# Minimum balance in microAlgos (0.1 Algo)
# Make sure to send amount+ 0.1 algo for min contract balance


class Steam(ARC4Contract):
    # State variables
    streamRate: UInt64  # MicroAlgos per second
    startTime: UInt64
    endTime: UInt64  # Time when all funds will be streamed
    withdrawnAmount: UInt64
    recipient: Account  # Recipient account
    balance: UInt64  # Keep track of contract balance
    isStreaming: bool  # Track streaming status
    last_start_time: UInt64  # New variable to inspect the start time
    last_withdrawal_time: UInt64  # New variable to track last withdrawal time

    # Create application and initialize state variables
    @arc4.abimethod(allow_actions=["NoOp"], create="require")
    def createApplication(self) -> None:
        self.streamRate = UInt64(0)
        self.startTime = UInt64(0)
        self.endTime = UInt64(0)  # Initialize endTime
        self.withdrawnAmount = UInt64(0)
        self.recipient = Global.creator_address  # Set the creator initially
        self.balance = UInt64(0)
        self.isStreaming = bool(False)
        self.last_start_time = UInt64(0)  # Initialize last start time
        self.last_withdrawal_time = UInt64(0)  # Initialize last withdrawal time

    # Start a new stream
    @arc4.abimethod(allow_actions=["NoOp"])
    def startStream(self, recipient: Account, rate: UInt64, amount: UInt64) -> None:
        assert Txn.sender == Global.creator_address  # only creator can start

        # Store stream parameters
        self.recipient = recipient
        self.streamRate = rate
        self.startTime = Global.latest_timestamp
        self.withdrawnAmount = UInt64(0)
        self.balance += amount
        self.isStreaming = bool(True)

        # Calculate the stream end time: total time to stream all the amount = amount / rate
        stream_duration = amount // rate  # Stream duration in seconds
        self.endTime = self.startTime + stream_duration  # Calculate endTime

        # Store last start time for inspection
        self.last_start_time = self.startTime
        assert self.last_start_time > UInt64(0), "Start time must be greater than 0"

    # Calculate the total streamed amount
    @subroutine
    def _calculateStreamedAmount(self) -> UInt64:
        elapsed_time = Global.latest_timestamp - self.startTime
        total_streamed = elapsed_time * self.streamRate
        return total_streamed - self.withdrawnAmount

    # Withdraw funds for the recipient based on the streamed amount
    @arc4.abimethod(allow_actions=["NoOp"])
    def withdraw(self) -> None:
        assert Txn.sender == self.recipient  # Only the recipient can withdraw

        available_amount = self._calculateStreamedAmount()

        elapsed_since_last_withdrawal = (
            Global.latest_timestamp - self.last_withdrawal_time
        )
        assert elapsed_since_last_withdrawal >= UInt64(
            2
        ), "Withdrawal can only occur every 2 second"  # Adjust as needed "not working"

        # Update the last withdrawal time
        self.last_withdrawal_time = Global.latest_timestamp

        assert available_amount > UInt64(0), "No available funds to withdraw"

        self.withdrawnAmount += available_amount  # Update the withdrawn amount
        self.balance -= available_amount

        itxn.InnerTransaction(
            sender=Global.current_application_address,
            receiver=self.recipient,
            amount=available_amount,
            note=b"Withdrawal from contract",
            type=TransactionType.Payment,
        ).submit()

    # Stop the stream and transfer any remaining balance back to the creator
    @arc4.abimethod(allow_actions=["NoOp"])
    def stopStream(self) -> None:
        assert Txn.sender == Global.creator_address  # Only creator can stop

        # Reset stream parameters
        self.streamRate = UInt64(0)
        self.isStreaming = bool(False)

        # Transfer remaining funds back to the creator
        if self.balance > 0:
            itxn.Payment(
                receiver=Global.creator_address,
                amount=self.balance,
                close_remainder_to=Global.creator_address,
            ).submit()
            self.balance = UInt64(0)

    # Get the estimated end time when the stream will complete
    @arc4.abimethod(allow_actions=["NoOp"])
    def getStreamEndTime(self) -> UInt64:
        return self.endTime
